{"ast":null,"code":"var _jsxFileName = \"/Users/leonhuzen/Projects/leon.huzen@noordhoff.nl/nfc-js/src/App.js\";\n\n/* eslint-disable no-undef */\nimport React, { useState, useEffect } from \"react\";\nimport logo from \"./logo.svg\";\nimport './App.css';\n\nfunction App() {\n  const [hasNFC, setHasNFC] = useState();\n  const [NFCLog, setNFCLog] = useState([\"test 1\"]);\n  useEffect(() => {\n    const scanButton = document.getElementById(\"scanButton\");\n    const writeButton = document.getElementById(\"writeButton\");\n\n    const log = message => {\n      var _document$getElementB;\n\n      return (_document$getElementB = document.getElementById(\"log\")) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.appendChild(document.createTextNode(`${message} \\n`));\n    };\n\n    scanButton.addEventListener(\"click\", async () => {\n      log(\"User clicked scan button\");\n\n      try {\n        const reader = new NDEFReader();\n        await reader.scan();\n        log(\"> Scan started\");\n        reader.addEventListener(\"error\", error => {\n          log(`Argh! Read Error: ${error.message}`);\n        });\n        reader.addEventListener(\"reading\", ({\n          message,\n          serialNumber\n        }) => {\n          log(`> Serial Number: ${serialNumber}`);\n          log(`> Records: (${message.records.length})`);\n        });\n      } catch (error) {\n        log(\"Argh! Scan Error \" + error);\n      }\n    });\n    writeButton.addEventListener(\"click\", async () => {\n      log(\"User clicked write button\");\n\n      try {\n        const writer = new NDEFWriter();\n        await writer.write(\"Hello world!\");\n        log(\"> Message written\");\n      } catch (error) {\n        log(\"Argh! \" + error);\n      }\n    });\n  }, [NFCLog, hasNFC, setNFCLog]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: `App ${hasNFC ? \"has-nfc\" : \"\"}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"header\", {\n    className: \"App-header\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logo,\n    className: \"App-logo\",\n    alt: \"logo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"scanButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, \"Scan\"), /*#__PURE__*/React.createElement(\"button\", {\n    id: \"writeButton\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }\n  }, \"Write\"), /*#__PURE__*/React.createElement(\"pre\", {\n    id: \"log\",\n    style: {\n      maxWidth: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"App-link\",\n    onClick: () => window.location.reload(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }\n  }, \"Refresh now\"), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, NFCLog.map((entry, index) => /*#__PURE__*/React.createElement(\"li\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, entry)))));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/leonhuzen/Projects/leon.huzen@noordhoff.nl/nfc-js/src/App.js"],"names":["React","useState","useEffect","App","hasNFC","setHasNFC","NFCLog","setNFCLog","scanButton","document","getElementById","writeButton","log","message","appendChild","createTextNode","addEventListener","reader","NDEFReader","scan","error","serialNumber","records","length","writer","NDEFWriter","write","logo","maxWidth","window","location","reload","map","entry","index"],"mappings":"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","sourcesContent":["/* eslint-disable no-undef */\nimport React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {const [hasNFC, setHasNFC] = useState();\n  const [NFCLog, setNFCLog] = useState([\"test 1\"]);\n\n  useEffect(() => {\n    const scanButton = document.getElementById(\"scanButton\");\n    const writeButton = document.getElementById(\"writeButton\");\n    const log = (message) =>\n      document\n        .getElementById(\"log\")\n        ?.appendChild(document.createTextNode(`${message} \\n`));\n    scanButton.addEventListener(\"click\", async () => {\n      log(\"User clicked scan button\");\n\n      try {\n        const reader = new NDEFReader();\n        await reader.scan();\n        log(\"> Scan started\");\n\n        reader.addEventListener(\"error\", (error) => {\n          log(`Argh! Read Error: ${error.message}`);\n        });\n\n        reader.addEventListener(\"reading\", ({ message, serialNumber }) => {\n          log(`> Serial Number: ${serialNumber}`);\n          log(`> Records: (${message.records.length})`);\n        });\n      } catch (error) {\n        log(\"Argh! Scan Error \" + error);\n      }\n    });\n\n    writeButton.addEventListener(\"click\", async () => {\n      log(\"User clicked write button\");\n\n      try {\n        const writer = new NDEFWriter();\n        await writer.write(\"Hello world!\");\n        log(\"> Message written\");\n      } catch (error) {\n        log(\"Argh! \" + error);\n      }\n    });\n  }, [NFCLog, hasNFC, setNFCLog]);\n  return (\n    <div className={`App ${hasNFC ? \"has-nfc\" : \"\"}`}>\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <button id=\"scanButton\">Scan</button>\n        <button id=\"writeButton\">Write</button>\n        <pre id=\"log\" style={{maxWidth: '100%'}}></pre>\n        <button\n          className=\"App-link\"\n          onClick={() => window.location.reload(true)}\n        >\n          Refresh now\n        </button>\n        <ul>\n          {NFCLog.map((entry, index) => (\n            <li key={index}>{entry}</li>\n          ))}\n        </ul>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}